security:
    password_hashers:
        App\Entity\User:
            algorithm: auto # En auto symfony prendra le meilleur algo dispo, mais on peut choisir nous même bcrypt, sodium(argon2, argon2id)...
            cost: 12 # est une valeur entre 4 et 31

    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    # password_hashers:
    #    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        in_database_user:
            entity: # dans l'entity
                class: App\Entity\User # User
                property: email # récupère l'e-mail pour faire la vérification 
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            #provider: users_in_memory

            provider: in_database_user
            form_login: 
                login_path: security_login 
                check_path: security_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
